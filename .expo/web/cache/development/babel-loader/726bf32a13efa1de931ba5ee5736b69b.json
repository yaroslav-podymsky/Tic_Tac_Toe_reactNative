{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _PROPERTIES_FLIP;\n\nimport hash from \"../useResponsiveQuery/hash\";\nimport prefixStyles from \"../react-native-web-fucntions/prefixStyles\";\nimport normalizeValueWithProperty from \"./normalizeValueWithProperty\";\nimport createReactDOMStyle from \"../react-native-web-fucntions/createReactDOMStyle\";\nimport hyphenateStyleName from \"../react-native-web-fucntions/hyphenateStyleName\";\nvar borderTopLeftRadius = 'borderTopLeftRadius';\nvar borderTopRightRadius = 'borderTopRightRadius';\nvar borderBottomLeftRadius = 'borderBottomLeftRadius';\nvar borderBottomRightRadius = 'borderBottomRightRadius';\nvar borderLeftColor = 'borderLeftColor';\nvar borderLeftStyle = 'borderLeftStyle';\nvar borderLeftWidth = 'borderLeftWidth';\nvar borderRightColor = 'borderRightColor';\nvar borderRightStyle = 'borderRightStyle';\nvar borderRightWidth = 'borderRightWidth';\nvar right = 'right';\nvar marginLeft = 'marginLeft';\nvar marginRight = 'marginRight';\nvar paddingLeft = 'paddingLeft';\nvar paddingRight = 'paddingRight';\nvar left = 'left';\nvar PROPERTIES_VALUE = ['clear', 'float', 'textAlign'];\nvar PROPERTIES_FLIP = (_PROPERTIES_FLIP = {}, _defineProperty(_PROPERTIES_FLIP, borderTopLeftRadius, borderTopRightRadius), _defineProperty(_PROPERTIES_FLIP, borderTopRightRadius, borderTopLeftRadius), _defineProperty(_PROPERTIES_FLIP, borderBottomLeftRadius, borderBottomRightRadius), _defineProperty(_PROPERTIES_FLIP, borderBottomRightRadius, borderBottomLeftRadius), _defineProperty(_PROPERTIES_FLIP, borderLeftColor, borderRightColor), _defineProperty(_PROPERTIES_FLIP, borderLeftStyle, borderRightStyle), _defineProperty(_PROPERTIES_FLIP, borderLeftWidth, borderRightWidth), _defineProperty(_PROPERTIES_FLIP, borderRightColor, borderLeftColor), _defineProperty(_PROPERTIES_FLIP, borderRightStyle, borderLeftStyle), _defineProperty(_PROPERTIES_FLIP, borderRightWidth, borderLeftWidth), _defineProperty(_PROPERTIES_FLIP, left, right), _defineProperty(_PROPERTIES_FLIP, marginLeft, marginRight), _defineProperty(_PROPERTIES_FLIP, marginRight, marginLeft), _defineProperty(_PROPERTIES_FLIP, paddingLeft, paddingRight), _defineProperty(_PROPERTIES_FLIP, paddingRight, paddingLeft), _defineProperty(_PROPERTIES_FLIP, right, left), _PROPERTIES_FLIP);\nvar PROPERTIES_I18N = {\n  borderTopStartRadius: borderTopLeftRadius,\n  borderTopEndRadius: borderTopRightRadius,\n  borderBottomStartRadius: borderBottomLeftRadius,\n  borderBottomEndRadius: borderBottomRightRadius,\n  borderStartColor: borderLeftColor,\n  borderStartStyle: borderLeftStyle,\n  borderStartWidth: borderLeftWidth,\n  borderEndColor: borderRightColor,\n  borderEndStyle: borderRightStyle,\n  borderEndWidth: borderRightWidth,\n  end: right,\n  marginStart: marginLeft,\n  marginEnd: marginRight,\n  paddingStart: paddingLeft,\n  paddingEnd: paddingRight,\n  start: left\n};\nvar customGroup = {\n  borderColor: 2,\n  borderRadius: 2,\n  borderStyle: 2,\n  borderWidth: 2,\n  display: 2,\n  flex: 2,\n  margin: 2,\n  overflow: 2,\n  overscrollBehavior: 2,\n  padding: 2,\n  marginHorizontal: 2.1,\n  marginVertical: 2.1,\n  paddingHorizontal: 2.1,\n  paddingVertical: 2.1\n};\nvar atomicGroup = 2.2;\nvar cache = new Map();\nexport function atomic(style) {\n  var compiledStyle = {\n    $$css: true\n  };\n  var compiledRules = [];\n\n  function atomicCompile(prop, value) {\n    var valueString = stringifyValueWithProperty(value, prop);\n    var cacheKey = prop + valueString;\n    var cachedResult = cache.get(cacheKey);\n    var identifier;\n\n    if (cachedResult != null) {\n      identifier = cachedResult[0];\n      compiledRules.push(cachedResult[1]);\n    } else {\n      identifier = createIdentifier('r', prop, value);\n      var order = customGroup[prop] || atomicGroup;\n      var rules = createAtomicRules(identifier, prop, value);\n      var orderedRules = [rules, order];\n      compiledRules.push(orderedRules);\n      cache.set(cacheKey, [identifier, orderedRules]);\n    }\n\n    return identifier;\n  }\n\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = style[prop];\n\n    if (value != null) {\n      var localizeableValue;\n\n      if (PROPERTIES_VALUE.indexOf(prop) > -1) {\n        var _left = atomicCompile(prop, 'left');\n\n        var _right = atomicCompile(prop, 'right');\n\n        if (value === 'start') {\n          localizeableValue = [_left, _right];\n        } else if (value === 'end') {\n          localizeableValue = [_right, _left];\n        }\n      }\n\n      var propPolyfill = PROPERTIES_I18N[prop];\n\n      if (propPolyfill != null) {\n        var ltr = atomicCompile(propPolyfill, value);\n        var rtl = atomicCompile(PROPERTIES_FLIP[propPolyfill], value);\n        localizeableValue = [ltr, rtl];\n      }\n\n      if (prop === 'transitionProperty') {\n        var values = Array.isArray(value) ? value : [value];\n        var polyfillIndices = [];\n\n        for (var i = 0; i < values.length; i++) {\n          var val = values[i];\n\n          if (typeof val === 'string' && PROPERTIES_I18N[val] != null) {\n            polyfillIndices.push(i);\n          }\n        }\n\n        if (polyfillIndices.length > 0) {\n          var ltrPolyfillValues = _toConsumableArray(values);\n\n          var rtlPolyfillValues = _toConsumableArray(values);\n\n          polyfillIndices.forEach(function (i) {\n            var ltrVal = ltrPolyfillValues[i];\n\n            if (typeof ltrVal === 'string') {\n              var ltrPolyfill = PROPERTIES_I18N[ltrVal];\n              var rtlPolyfill = PROPERTIES_FLIP[ltrPolyfill];\n              ltrPolyfillValues[i] = ltrPolyfill;\n              rtlPolyfillValues[i] = rtlPolyfill;\n\n              var _ltr = atomicCompile(prop, ltrPolyfillValues);\n\n              var _rtl = atomicCompile(prop, rtlPolyfillValues);\n\n              localizeableValue = [_ltr, _rtl];\n            }\n          });\n        }\n      }\n\n      if (localizeableValue == null) {\n        localizeableValue = atomicCompile(prop, value);\n      } else {\n        compiledStyle['$$css$localize'] = true;\n      }\n\n      compiledStyle[prop] = localizeableValue;\n    }\n  });\n  return [compiledStyle, compiledRules];\n}\nexport function stringifyValueWithProperty(value, property) {\n  var normalizedValue = normalizeValueWithProperty(value, property);\n  return typeof normalizedValue !== 'string' ? JSON.stringify(normalizedValue || '') : normalizedValue;\n}\n\nfunction createIdentifier(prefix, name, value) {\n  var hashedString = hash(name + stringifyValueWithProperty(value, name));\n  return process.env.NODE_ENV !== 'production' ? \"\".concat(prefix, \"-\").concat(name, \"-\").concat(hashedString) : \"\".concat(prefix, \"-\").concat(hashedString);\n}\n\nfunction createAtomicRules(identifier, property, value) {\n  var rules = [];\n  var selector = \".\".concat(identifier);\n\n  switch (property) {\n    case 'animationKeyframes':\n      {\n        var _processKeyframesValu = processKeyframesValue(value),\n            _processKeyframesValu2 = _slicedToArray(_processKeyframesValu, 2),\n            animationNames = _processKeyframesValu2[0],\n            keyframesRules = _processKeyframesValu2[1];\n\n        var block = createDeclarationBlock({\n          animationName: animationNames.join(',')\n        });\n        rules.push.apply(rules, [\"\".concat(selector).concat(block)].concat(_toConsumableArray(keyframesRules)));\n        break;\n      }\n\n    case 'placeholderTextColor':\n      {\n        var _block = createDeclarationBlock({\n          color: value,\n          opacity: 1\n        });\n\n        rules.push(\"\".concat(selector, \"::-webkit-input-placeholder\").concat(_block), \"\".concat(selector, \"::-moz-placeholder\").concat(_block), \"\".concat(selector, \":-ms-input-placeholder\").concat(_block), \"\".concat(selector, \"::placeholder\").concat(_block));\n        break;\n      }\n\n    case 'pointerEvents':\n      {\n        var finalValue = value;\n\n        if (value === 'auto' || value === 'box-only') {\n          finalValue = 'auto!important';\n\n          if (value === 'box-only') {\n            var _block3 = createDeclarationBlock({\n              pointerEvents: 'none'\n            });\n\n            rules.push(\"\".concat(selector, \">*\").concat(_block3));\n          }\n        } else if (value === 'none' || value === 'box-none') {\n          finalValue = 'none!important';\n\n          if (value === 'box-none') {\n            var _block4 = createDeclarationBlock({\n              pointerEvents: 'auto'\n            });\n\n            rules.push(\"\".concat(selector, \">*\").concat(_block4));\n          }\n        }\n\n        var _block2 = createDeclarationBlock({\n          pointerEvents: finalValue\n        });\n\n        rules.push(\"\".concat(selector).concat(_block2));\n        break;\n      }\n\n    case 'scrollbarWidth':\n      {\n        if (value === 'none') {\n          rules.push(\"\".concat(selector, \"::-webkit-scrollbar{display:none}\"));\n        }\n\n        var _block5 = createDeclarationBlock({\n          scrollbarWidth: value\n        });\n\n        rules.push(\"\".concat(selector).concat(_block5));\n        break;\n      }\n\n    default:\n      {\n        var _block6 = createDeclarationBlock(_defineProperty({}, property, value));\n\n        rules.push(\"\".concat(selector).concat(_block6));\n        break;\n      }\n  }\n\n  return rules;\n}\n\nfunction createDeclarationBlock(style) {\n  var domStyle = prefixStyles(createReactDOMStyle(style));\n  var declarationsString = Object.keys(domStyle).map(function (property) {\n    var value = domStyle[property];\n    var prop = hyphenateStyleName(property);\n\n    if (Array.isArray(value)) {\n      return value.map(function (v) {\n        return \"\".concat(prop, \":\").concat(v);\n      }).join(';');\n    } else {\n      return \"\".concat(prop, \":\").concat(value);\n    }\n  }).sort().join(';');\n  return \"{\".concat(declarationsString, \";}\");\n}\n\nfunction processKeyframesValue(keyframesValue) {\n  if (typeof keyframesValue === 'number') {\n    throw new Error(\"Invalid CSS keyframes type: \".concat(typeof keyframesValue));\n  }\n\n  var animationNames = [];\n  var rules = [];\n  var value = Array.isArray(keyframesValue) ? keyframesValue : [keyframesValue];\n  value.forEach(function (keyframes) {\n    if (typeof keyframes === 'string') {\n      animationNames.push(keyframes);\n    } else {\n      var _createKeyframes = createKeyframes(keyframes),\n          _createKeyframes2 = _slicedToArray(_createKeyframes, 2),\n          identifier = _createKeyframes2[0],\n          keyframesRules = _createKeyframes2[1];\n\n      animationNames.push(identifier);\n      rules.push.apply(rules, _toConsumableArray(keyframesRules));\n    }\n  });\n  return [animationNames, rules];\n}\n\nfunction createKeyframes(keyframes) {\n  var prefixes = ['-webkit-', ''];\n  var identifier = createIdentifier('r', 'animation', keyframes);\n  var steps = '{' + Object.keys(keyframes).map(function (stepName) {\n    var rule = keyframes[stepName];\n    var block = createDeclarationBlock(rule);\n    return \"\".concat(stepName).concat(block);\n  }).join('') + '}';\n  var rules = prefixes.map(function (prefix) {\n    return \"@\".concat(prefix, \"keyframes \").concat(identifier).concat(steps);\n  });\n  return [identifier, rules];\n}","map":{"version":3,"sources":["atomic.ts"],"names":["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRightColor","borderRightStyle","borderRightWidth","right","marginLeft","marginRight","paddingLeft","paddingRight","left","PROPERTIES_VALUE","PROPERTIES_FLIP","PROPERTIES_I18N","borderTopStartRadius","borderTopEndRadius","borderBottomStartRadius","borderBottomEndRadius","borderStartColor","borderStartStyle","borderStartWidth","borderEndColor","borderEndStyle","borderEndWidth","end","marginStart","marginEnd","paddingStart","paddingEnd","start","customGroup","borderColor","borderRadius","borderStyle","borderWidth","display","flex","margin","overflow","overscrollBehavior","padding","marginHorizontal","marginVertical","paddingHorizontal","paddingVertical","atomicGroup","cache","compiledStyle","$$css","compiledRules","valueString","stringifyValueWithProperty","cacheKey","prop","cachedResult","identifier","createIdentifier","order","rules","createAtomicRules","orderedRules","Object","value","style","atomicCompile","localizeableValue","propPolyfill","ltr","rtl","values","Array","polyfillIndices","i","val","ltrPolyfillValues","rtlPolyfillValues","ltrVal","ltrPolyfill","rtlPolyfill","normalizedValue","normalizeValueWithProperty","JSON","hashedString","hash","name","process","selector","processKeyframesValue","block","createDeclarationBlock","animationName","animationNames","color","opacity","finalValue","pointerEvents","scrollbarWidth","domStyle","prefixStyles","createReactDOMStyle","declarationsString","property","hyphenateStyleName","v","keyframes","createKeyframes","prefixes","steps","stepName","rule","prefix"],"mappings":"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","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\n\nimport hash from '../useResponsiveQuery/hash';\nimport prefixStyles from '../react-native-web-fucntions/prefixStyles';\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\nimport createReactDOMStyle from '../react-native-web-fucntions/createReactDOMStyle';\nimport hyphenateStyleName from '../react-native-web-fucntions/hyphenateStyleName';\ntype Value = Object | Array<any> | string | number;\ntype Style = { [key: string]: Value };\ntype Rule = string;\ntype Rules = Array<Rule>;\ntype RulesData = [Rules, number];\ntype CompiledStyle = {\n  //@ts-ignore\n  $$css: boolean;\n  //@ts-ignore\n  $$css$localize?: boolean;\n  [key: string]: string | Array<string>;\n};\nconst borderTopLeftRadius = 'borderTopLeftRadius';\nconst borderTopRightRadius = 'borderTopRightRadius';\nconst borderBottomLeftRadius = 'borderBottomLeftRadius';\nconst borderBottomRightRadius = 'borderBottomRightRadius';\nconst borderLeftColor = 'borderLeftColor';\nconst borderLeftStyle = 'borderLeftStyle';\nconst borderLeftWidth = 'borderLeftWidth';\nconst borderRightColor = 'borderRightColor';\nconst borderRightStyle = 'borderRightStyle';\nconst borderRightWidth = 'borderRightWidth';\nconst right = 'right';\nconst marginLeft = 'marginLeft';\nconst marginRight = 'marginRight';\nconst paddingLeft = 'paddingLeft';\nconst paddingRight = 'paddingRight';\nconst left = 'left';\nconst PROPERTIES_VALUE: any = ['clear', 'float', 'textAlign'];\n// Map of LTR property names to their BiDi equivalent.\nconst PROPERTIES_FLIP: { [key: string]: string } = {\n  [borderTopLeftRadius]: borderTopRightRadius,\n  [borderTopRightRadius]: borderTopLeftRadius,\n  [borderBottomLeftRadius]: borderBottomRightRadius,\n  [borderBottomRightRadius]: borderBottomLeftRadius,\n  [borderLeftColor]: borderRightColor,\n  [borderLeftStyle]: borderRightStyle,\n  [borderLeftWidth]: borderRightWidth,\n  [borderRightColor]: borderLeftColor,\n  [borderRightStyle]: borderLeftStyle,\n  [borderRightWidth]: borderLeftWidth,\n  [left]: right,\n  [marginLeft]: marginRight,\n  [marginRight]: marginLeft,\n  [paddingLeft]: paddingRight,\n  [paddingRight]: paddingLeft,\n  [right]: left,\n};\n// Map of I18N property names to their LTR equivalent.\nconst PROPERTIES_I18N: any = {\n  borderTopStartRadius: borderTopLeftRadius,\n  borderTopEndRadius: borderTopRightRadius,\n  borderBottomStartRadius: borderBottomLeftRadius,\n  borderBottomEndRadius: borderBottomRightRadius,\n  borderStartColor: borderLeftColor,\n  borderStartStyle: borderLeftStyle,\n  borderStartWidth: borderLeftWidth,\n  borderEndColor: borderRightColor,\n  borderEndStyle: borderRightStyle,\n  borderEndWidth: borderRightWidth,\n  end: right,\n  marginStart: marginLeft,\n  marginEnd: marginRight,\n  paddingStart: paddingLeft,\n  paddingEnd: paddingRight,\n  start: left,\n};\ntype CompilerOutput = [CompiledStyle, Array<RulesData>];\nconst customGroup: { [key: string]: number } = {\n  borderColor: 2,\n  borderRadius: 2,\n  borderStyle: 2,\n  borderWidth: 2,\n  display: 2,\n  flex: 2,\n  margin: 2,\n  overflow: 2,\n  overscrollBehavior: 2,\n  padding: 2,\n  marginHorizontal: 2.1,\n  marginVertical: 2.1,\n  paddingHorizontal: 2.1,\n  paddingVertical: 2.1,\n};\nconst atomicGroup = 2.2;\nconst cache = new Map();\nexport function atomic(style: Style): CompilerOutput {\n  //@ts-ignore\n  const compiledStyle: CompiledStyle = { $$css: true };\n  const compiledRules: any = [];\n\n  function atomicCompile(prop: any, value: any) {\n    const valueString = stringifyValueWithProperty(value, prop);\n    const cacheKey = prop + valueString;\n    const cachedResult = cache.get(cacheKey);\n    let identifier;\n    if (cachedResult != null) {\n      identifier = cachedResult[0];\n      compiledRules.push(cachedResult[1]);\n    } else {\n      identifier = createIdentifier('r', prop, value);\n      const order = customGroup[prop] || atomicGroup;\n      const rules = createAtomicRules(identifier, prop, value);\n      const orderedRules = [rules, order];\n      compiledRules.push(orderedRules);\n      cache.set(cacheKey, [identifier, orderedRules]);\n    }\n    return identifier;\n  }\n\n  Object.keys(style)\n    .sort()\n    .forEach((prop) => {\n      const value = style[prop];\n      if (value != null) {\n        let localizeableValue;\n        // BiDi flip values\n        if (PROPERTIES_VALUE.indexOf(prop) > -1) {\n          const left = atomicCompile(prop, 'left');\n          const right = atomicCompile(prop, 'right');\n          if (value === 'start') {\n            localizeableValue = [left, right];\n          } else if (value === 'end') {\n            localizeableValue = [right, left];\n          }\n        }\n        // BiDi flip properties\n        const propPolyfill = PROPERTIES_I18N[prop];\n        if (propPolyfill != null) {\n          const ltr = atomicCompile(propPolyfill, value);\n          const rtl = atomicCompile(PROPERTIES_FLIP[propPolyfill], value);\n          localizeableValue = [ltr, rtl];\n        }\n        // BiDi flip transitionProperty value\n        if (prop === 'transitionProperty') {\n          const values = Array.isArray(value) ? value : [value];\n          const polyfillIndices = [];\n\n          for (let i = 0; i < values.length; i++) {\n            const val = values[i];\n            if (typeof val === 'string' && PROPERTIES_I18N[val] != null) {\n              polyfillIndices.push(i);\n            }\n          }\n\n          if (polyfillIndices.length > 0) {\n            const ltrPolyfillValues = [...values];\n            const rtlPolyfillValues = [...values];\n            polyfillIndices.forEach((i) => {\n              const ltrVal = ltrPolyfillValues[i];\n              if (typeof ltrVal === 'string') {\n                const ltrPolyfill = PROPERTIES_I18N[ltrVal];\n                const rtlPolyfill = PROPERTIES_FLIP[ltrPolyfill];\n                ltrPolyfillValues[i] = ltrPolyfill;\n                rtlPolyfillValues[i] = rtlPolyfill;\n                const ltr = atomicCompile(prop, ltrPolyfillValues);\n                const rtl = atomicCompile(prop, rtlPolyfillValues);\n                localizeableValue = [ltr, rtl];\n              }\n            });\n          }\n        }\n\n        if (localizeableValue == null) {\n          localizeableValue = atomicCompile(prop, value);\n        } else {\n          compiledStyle['$$css$localize'] = true;\n        }\n\n        compiledStyle[prop] = localizeableValue;\n      }\n    });\n\n  return [compiledStyle, compiledRules];\n}\n\n/**\n * Create a value string that normalizes different input values with a common\n * output.\n */\nexport function stringifyValueWithProperty(\n  value: Value,\n  property?: string\n): string {\n  // e.g., 0 => '0px', 'black' => 'rgba(0,0,0,1)'\n  const normalizedValue = normalizeValueWithProperty(value, property);\n  return typeof normalizedValue !== 'string'\n    ? JSON.stringify(normalizedValue || '')\n    : normalizedValue;\n}\n\n/**\n * An identifier is associated with a unique set of styles.\n */\nfunction createIdentifier(prefix: string, name: string, value: Value): string {\n  const hashedString = hash(name + stringifyValueWithProperty(value, name));\n  return process.env.NODE_ENV !== 'production'\n    ? `${prefix}-${name}-${hashedString}`\n    : `${prefix}-${hashedString}`;\n}\n\n/**\n * Create the Atomic CSS rules needed for a given StyleSheet rule.\n * Translates StyleSheet declarations to CSS.\n */\nfunction createAtomicRules(\n  identifier: string,\n  property: any,\n  value: any\n): Rules {\n  const rules = [];\n  const selector = `.${identifier}`;\n\n  // Handle non-standard properties and object values that require multiple\n  // CSS rules to be created.\n  switch (property) {\n    case 'animationKeyframes': {\n      const [animationNames, keyframesRules] = processKeyframesValue(value);\n      const block = createDeclarationBlock({\n        animationName: animationNames.join(','),\n      });\n      rules.push(`${selector}${block}`, ...keyframesRules);\n      break;\n    }\n\n    // Equivalent to using '::placeholder'\n    case 'placeholderTextColor': {\n      const block = createDeclarationBlock({ color: value, opacity: 1 });\n      rules.push(\n        `${selector}::-webkit-input-placeholder${block}`,\n        `${selector}::-moz-placeholder${block}`,\n        `${selector}:-ms-input-placeholder${block}`,\n        `${selector}::placeholder${block}`\n      );\n      break;\n    }\n\n    // Polyfill for additional 'pointer-events' values\n    // See d13f78622b233a0afc0c7a200c0a0792c8ca9e58\n    case 'pointerEvents': {\n      let finalValue = value;\n      if (value === 'auto' || value === 'box-only') {\n        finalValue = 'auto!important';\n        if (value === 'box-only') {\n          const block = createDeclarationBlock({ pointerEvents: 'none' });\n          rules.push(`${selector}>*${block}`);\n        }\n      } else if (value === 'none' || value === 'box-none') {\n        finalValue = 'none!important';\n        if (value === 'box-none') {\n          const block = createDeclarationBlock({ pointerEvents: 'auto' });\n          rules.push(`${selector}>*${block}`);\n        }\n      }\n      const block = createDeclarationBlock({ pointerEvents: finalValue });\n      rules.push(`${selector}${block}`);\n      break;\n    }\n\n    // Polyfill for draft spec\n    // https://drafts.csswg.org/css-scrollbars-1/\n    case 'scrollbarWidth': {\n      if (value === 'none') {\n        rules.push(`${selector}::-webkit-scrollbar{display:none}`);\n      }\n      const block = createDeclarationBlock({ scrollbarWidth: value });\n      rules.push(`${selector}${block}`);\n      break;\n    }\n\n    default: {\n      const block = createDeclarationBlock({ [property]: value });\n      rules.push(`${selector}${block}`);\n      break;\n    }\n  }\n\n  return rules;\n}\n\n/**\n * Creates a CSS declaration block from a StyleSheet object.\n */\nfunction createDeclarationBlock(style: Style): string {\n  const domStyle: any = prefixStyles(createReactDOMStyle(style));\n  const declarationsString = Object.keys(domStyle)\n    .map((property) => {\n      const value = domStyle[property];\n      const prop = hyphenateStyleName(property);\n      // The prefixer may return an array of values:\n      // { display: [ '-webkit-flex', 'flex' ] }\n      // to represent \"fallback\" declarations\n      // { display: -webkit-flex; display: flex; }\n      if (Array.isArray(value)) {\n        return value.map((v) => `${prop}:${v}`).join(';');\n      } else {\n        return `${prop}:${value}`;\n      }\n    })\n    // Once properties are hyphenated, this will put the vendor\n    // prefixed and short-form properties first in the list.\n    .sort()\n    .join(';');\n\n  return `{${declarationsString};}`;\n}\n\n/**\n * Create CSS keyframes rules and names from a StyleSheet keyframes object.\n */\nfunction processKeyframesValue(keyframesValue: any) {\n  if (typeof keyframesValue === 'number') {\n    throw new Error(`Invalid CSS keyframes type: ${typeof keyframesValue}`);\n  }\n\n  const animationNames: any = [];\n  const rules: any = [];\n  const value = Array.isArray(keyframesValue)\n    ? keyframesValue\n    : [keyframesValue];\n\n  value.forEach((keyframes) => {\n    if (typeof keyframes === 'string') {\n      // Support external animation libraries (identifiers only)\n      animationNames.push(keyframes);\n    } else {\n      // Create rules for each of the keyframes\n      const [identifier, keyframesRules] = createKeyframes(keyframes);\n      animationNames.push(identifier);\n      rules.push(...keyframesRules);\n    }\n  });\n\n  return [animationNames, rules];\n}\n\n/**\n * Create individual CSS keyframes rules.\n */\nfunction createKeyframes(keyframes: any): [string, Rules] {\n  const prefixes = ['-webkit-', ''];\n  const identifier = createIdentifier('r', 'animation', keyframes);\n\n  const steps =\n    '{' +\n    Object.keys(keyframes)\n      .map((stepName) => {\n        const rule = keyframes[stepName];\n        const block = createDeclarationBlock(rule);\n        return `${stepName}${block}`;\n      })\n      .join('') +\n    '}';\n\n  const rules = prefixes.map((prefix) => {\n    return `@${prefix}keyframes ${identifier}${steps}`;\n  });\n  return [identifier, rules];\n}\n"]},"metadata":{},"sourceType":"module"}