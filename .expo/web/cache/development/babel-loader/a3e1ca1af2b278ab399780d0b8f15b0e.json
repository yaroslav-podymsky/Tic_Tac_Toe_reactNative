{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useEffect as $cKEhs$useEffect } from \"react\";\nimport { useToggle as $cKEhs$useToggle } from \"@react-aria/toggle\";\nimport { filterDOMProps as $cKEhs$filterDOMProps, mergeProps as $cKEhs$mergeProps } from \"@react-aria/utils\";\nimport { useField as $cKEhs$useField } from \"@react-aria/label\";\nimport { useToggleState as $cKEhs$useToggleState } from \"@react-stately/toggle\";\n\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n  var _ref = (0, $cKEhs$useToggle)(props, state, inputRef),\n      inputProps = _ref.inputProps;\n\n  var isSelected = state.isSelected;\n  var isIndeterminate = props.isIndeterminate;\n  (0, $cKEhs$useEffect)(function () {\n    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n  });\n  return {\n    inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n      checked: isSelected\n    })\n  };\n}\n\nvar $1ae600c947479353$export$31440636951aa68c = new WeakMap();\nvar $1ae600c947479353$export$a3077e9c93f7360f = new WeakMap();\nvar $1ae600c947479353$export$d5679492e2864181 = new WeakMap();\n\nfunction $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {\n  var isDisabled = props.isDisabled,\n      name = props.name;\n\n  var _ref2 = (0, $cKEhs$useField)(_objectSpread(_objectSpread({}, props), {}, {\n    labelElementType: \"span\"\n  })),\n      labelProps = _ref2.labelProps,\n      fieldProps = _ref2.fieldProps,\n      descriptionProps = _ref2.descriptionProps,\n      errorMessageProps = _ref2.errorMessageProps;\n\n  (0, $1ae600c947479353$export$a3077e9c93f7360f).set(state, descriptionProps.id);\n  (0, $1ae600c947479353$export$d5679492e2864181).set(state, errorMessageProps.id);\n  var domProps = (0, $cKEhs$filterDOMProps)(props, {\n    labelable: true\n  });\n  (0, $1ae600c947479353$export$31440636951aa68c).set(state, name);\n  return {\n    groupProps: (0, $cKEhs$mergeProps)(domProps, _objectSpread({\n      role: \"group\",\n      \"aria-disabled\": isDisabled || undefined\n    }, fieldProps)),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\n\nfunction $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {\n  var toggleState = (0, $cKEhs$useToggleState)({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange: function onChange(isSelected) {\n      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);\n      if (props.onChange) props.onChange(isSelected);\n    }\n  });\n\n  var _ref3 = (0, $406796ff087fe49b$export$e375f10ce42261c5)(_objectSpread(_objectSpread({}, props), {}, {\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || (0, $1ae600c947479353$export$31440636951aa68c).get(state)\n  }), toggleState, inputRef),\n      inputProps = _ref3.inputProps;\n\n  return {\n    inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n      \"aria-describedby\": [state.validationState === \"invalid\" ? (0, $1ae600c947479353$export$d5679492e2864181).get(state) : null, (0, $1ae600c947479353$export$a3077e9c93f7360f).get(state)].filter(Boolean).join(\" \") || undefined\n    })\n  };\n}\n\nexport { $406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox, $1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup, $fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem };","map":{"version":3,"sources":["packages/@react-aria/checkbox/src/useCheckbox.ts","packages/@react-aria/checkbox/src/useCheckboxGroup.ts","packages/@react-aria/checkbox/src/utils.ts","packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupDescriptionIds, checkboxGroupErrorMessageIds, checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useField} from '@react-aria/label';\n\nexport interface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: DOMAttributes,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: DOMAttributes,\n  /** Props for the checkbox group description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the checkbox group error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  checkboxGroupDescriptionIds.set(state, descriptionProps.id);\n  checkboxGroupErrorMessageIds.set(state, errorMessageProps.id);\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\nexport const checkboxGroupDescriptionIds = new WeakMap<CheckboxGroupState, string>();\nexport const checkboxGroupErrorMessageIds = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupDescriptionIds, checkboxGroupErrorMessageIds, checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {\n    inputProps: {\n      ...inputProps,\n      'aria-describedby': [\n        state.validationState === 'invalid' ? checkboxGroupErrorMessageIds.get(state) : null,\n        checkboxGroupDescriptionIds.get(state)\n      ].filter(Boolean).join(' ') || undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}