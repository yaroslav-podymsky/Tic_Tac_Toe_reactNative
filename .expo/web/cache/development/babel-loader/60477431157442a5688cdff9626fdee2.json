{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { atomic } from \"../react-native-web-fucntions/atomic\";\nimport preprocess from \"../react-native-web-fucntions/preprocess\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport stableHash from 'stable-hash';\nimport hash from \"./hash\";\nimport { useStableMemo } from \"./useStableMemo\";\nimport { getResponsiveStylesImpl, useDimensionsWithEnable } from \"./common\";\nimport { ResponsiveQueryContext } from \"./ResponsiveQueryProvider\";\nimport React from 'react';\nvar textContentMap = {};\nexport var useResponsiveQuery = function useResponsiveQuery(queries) {\n  var _queries$disableCSSMe;\n\n  var responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  var disableCSSMediaQueries = (_queries$disableCSSMe = queries === null || queries === void 0 ? void 0 : queries.disableCSSMediaQueries) !== null && _queries$disableCSSMe !== void 0 ? _queries$disableCSSMe : responsiveQueryContext.disableCSSMediaQueries;\n  var windowWidth = useDimensionsWithEnable({\n    enable: disableCSSMediaQueries\n  }).width;\n  var values = useStableMemo(function () {\n    if (disableCSSMediaQueries) {\n      var _getResponsiveStyles = getResponsiveStylesImpl(windowWidth);\n\n      if (queries) {\n        var _getResponsiveStyles2 = _getResponsiveStyles(queries),\n            styles = _getResponsiveStyles2.styles;\n\n        return {\n          styles: styles,\n          getResponsiveStyles: _getResponsiveStyles\n        };\n      } else {\n        return {\n          getResponsiveStyles: _getResponsiveStyles\n        };\n      }\n    } else {\n      if (queries) {\n        var _getResponsiveStyles3 = getResponsiveStyles(queries),\n            _styles = _getResponsiveStyles3.styles,\n            dataSet = _getResponsiveStyles3.dataSet;\n\n        return {\n          dataSet: dataSet,\n          styles: _styles,\n          getResponsiveStyles: getResponsiveStyles\n        };\n      } else {\n        return {\n          getResponsiveStyles: getResponsiveStyles\n        };\n      }\n    }\n  }, [queries, windowWidth, disableCSSMediaQueries]);\n  return values;\n};\n\nvar getDataAttribute = function getDataAttribute(queryRule) {\n  if (typeof queryRule.minWidth === 'number' && typeof queryRule.maxWidth === 'number') {\n    return \"min-width-\".concat(queryRule.minWidth, \"-max-width-\").concat(queryRule.maxWidth);\n  } else if (typeof queryRule.minWidth === 'number') {\n    return \"min-width-\".concat(queryRule.minWidth);\n  } else if (typeof queryRule.maxWidth === 'number') {\n    return \"max-width-\".concat(queryRule.maxWidth);\n  }\n\n  return undefined;\n};\n\nvar getMediaQueryRule = function getMediaQueryRule(query, newRule) {\n  if (typeof query.minWidth === 'number' && typeof query.maxWidth === 'number') {\n    return \"@media only screen and (min-width: \".concat(query.minWidth, \"px) and (max-width: \").concat(query.maxWidth, \"px) { \").concat(newRule, \" }\");\n  } else if (typeof query.minWidth === 'number') {\n    return \"@media only screen and (min-width: \".concat(query.minWidth, \"px) { \").concat(newRule, \" }\");\n  } else if (typeof query.maxWidth === 'number') {\n    return \"@media only screen and (max-width: \".concat(query.maxWidth, \"px) { \").concat(newRule, \" }\");\n  }\n\n  return undefined;\n};\n\nvar getResponsiveStyles = function getResponsiveStyles(queries) {\n  var queryString = stableHash(queries.query);\n  var queriesHash = hash(queryString);\n  var styles = queries.initial ? [StyleSheet.create({\n    initial: StyleSheet.flatten(queries.initial)\n  }).initial] : undefined;\n  var dataSet = {};\n  var styleSheet;\n\n  var insert = function insert(rule) {\n    if (typeof window !== 'undefined') {\n      if (!styleSheet) {\n        var styleEl = document.createElement('style');\n        styleEl.type = 'text/css';\n        styleEl.appendChild(document.createTextNode(''));\n        document.head.appendChild(styleEl);\n        styleSheet = styleEl.sheet;\n      }\n\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n  };\n\n  if (queries.query) {\n    queries.query.forEach(function (queryRule) {\n      var queryHash = queriesHash + hash(stableHash(queryRule));\n      var dataAttribute = getDataAttribute(queryRule);\n\n      if (dataAttribute) {\n        var newIdentifier = \"[data-\".concat(dataAttribute, \"$=\\\"\").concat(queryHash, \"\\\"]\");\n        dataSet[dataAttribute] = queryHash;\n        var mediaRules = '';\n        var flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n        var newStyle = preprocess(flattenQueryStyle);\n\n        var _atomic = atomic(newStyle),\n            _atomic2 = _slicedToArray(_atomic, 2),\n            compiledStyle = _atomic2[0],\n            compiledOrderedRules = _atomic2[1];\n\n        delete compiledStyle.$$css;\n        Object.keys(compiledStyle).forEach(function (key) {\n          var oldIdentifier = compiledStyle[key];\n          compiledOrderedRules.forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                rules = _ref2[0],\n                _order = _ref2[1];\n\n            var newRule = '';\n\n            if (rules[0].includes(oldIdentifier)) {\n              newRule = rules[0].replace('.' + oldIdentifier, newIdentifier);\n            }\n\n            mediaRules += newRule;\n          });\n        });\n\n        if (mediaRules) {\n          var mediaQueryRule = getMediaQueryRule(queryRule, mediaRules);\n          insert(\"/*\".concat(queryHash, \"{}*/\").concat(mediaQueryRule));\n          textContentMap[\"/*\".concat(queryHash, \"{}*/\").concat(mediaQueryRule)] = true;\n        }\n      }\n    });\n  }\n\n  return {\n    styles: styles,\n    dataSet: dataSet\n  };\n};\n\nexport var getStyleElement = function getStyleElement() {\n  return React.createElement(\"style\", {\n    type: \"text/css\",\n    dangerouslySetInnerHTML: {\n      __html: Object.keys(textContentMap).join('')\n    }\n  });\n};","map":{"version":3,"sources":["useResponsiveQuery.web.tsx"],"names":["textContentMap","useResponsiveQuery","queries","responsiveQueryContext","React","disableCSSMediaQueries","windowWidth","enable","values","useStableMemo","getResponsiveStyles","getResponsiveStylesImpl","styles","dataSet","getDataAttribute","queryRule","getMediaQueryRule","query","queryString","stableHash","queriesHash","hash","initial","StyleSheet","insert","rule","styleEl","document","styleSheet","queryHash","dataAttribute","newIdentifier","mediaRules","flattenQueryStyle","newStyle","preprocess","atomic","compiledStyle","Object","key","oldIdentifier","compiledOrderedRules","newRule","rules","mediaQueryRule","getStyleElement","__html"],"mappings":"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","sourcesContent":["// import { atomic } from 'react-native-web/dist/exports/StyleSheet/compiler';\nimport { atomic } from '../react-native-web-fucntions/atomic';\nimport preprocess from '../react-native-web-fucntions/preprocess';\nimport type {\n  DataSet,\n  Query,\n  UseResponsiveQueryParams,\n  UseResponsiveQueryReturnType,\n  GetResponsiveStylesParams,\n} from './types';\nimport { StyleSheet } from 'react-native';\n// @ts-ignore\nimport stableHash from 'stable-hash';\nimport hash from './hash';\nimport type { GetResponsiveStylesReturnType } from './types';\nimport { useStableMemo } from './useStableMemo';\nimport { getResponsiveStylesImpl, useDimensionsWithEnable } from './common';\nimport { ResponsiveQueryContext } from './ResponsiveQueryProvider';\nimport React from 'react';\n\n/******************** Implementation after RNW v0.18 ***********************/\n\n/**\n * 1. preprocess:- Handles shadow/text shadow conversion from RN styles to web *                 styles\n *\n * 2. atomic:- it handles prefixing, converting RN specific styles to web styles *             and generating the CSS selector.\n *             Input {marginTop: 10}\n *             Output\n *             compiledStyle : marginTop: \"r-marginTop-156q2ks\"\n *             compiledOrderedRules : \".r-marginTop-156q2ks{margin-top:10px;}\"\n *      a)compiledStyle:- Array it holds identifier/selector with properties\n *      b)compiledOrderedRules:- Array it holds the css rule with selector name\n *      Also from RNW v0.18 handles swapping of ltr styles if enabled by user\n * 3. createSheet:- used to grab sheet which exist already created by rnw. when we *                  call createSheet without id it will return sheet which exist. *                  cause it automatically takes a default ID  which is already in *                  use (created by rnw with default ID) so this return sheet *                  which exist with  ID doesn't create a new sheet.\n *\n * This Implementation is based on asumptions that RNW doesn't change the         * function  or doesn't re-write them. if there is any change in RNW implmentation * it we'll break and needs to be updated.\n *\n */\nlet textContentMap: any = {};\n\nexport const useResponsiveQuery = (\n  queries?: UseResponsiveQueryParams\n): UseResponsiveQueryReturnType => {\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries =\n    queries?.disableCSSMediaQueries ??\n    responsiveQueryContext.disableCSSMediaQueries;\n\n  // Only attaches listener if disableCSSMediaQueries is true\n  const windowWidth = useDimensionsWithEnable({\n    enable: disableCSSMediaQueries,\n  }).width;\n\n  const values = useStableMemo(() => {\n    // Use the non-media query responsive styling\n    if (disableCSSMediaQueries) {\n      const getResponsiveStyles = getResponsiveStylesImpl(windowWidth);\n      if (queries) {\n        const { styles } = getResponsiveStyles(queries);\n        return { styles, getResponsiveStyles };\n      } else {\n        return { getResponsiveStyles };\n      }\n    } else {\n      if (queries) {\n        const { styles, dataSet } = getResponsiveStyles(queries);\n        return { dataSet, styles, getResponsiveStyles };\n      } else {\n        return { getResponsiveStyles };\n      }\n    }\n  }, [queries, windowWidth, disableCSSMediaQueries]);\n\n  return values;\n};\n\nconst getDataAttribute = (queryRule: Query) => {\n  if (\n    typeof queryRule.minWidth === 'number' &&\n    typeof queryRule.maxWidth === 'number'\n  ) {\n    return `min-width-${queryRule.minWidth}-max-width-${queryRule.maxWidth}`;\n  } else if (typeof queryRule.minWidth === 'number') {\n    return `min-width-${queryRule.minWidth}`;\n  } else if (typeof queryRule.maxWidth === 'number') {\n    return `max-width-${queryRule.maxWidth}`;\n  }\n\n  return undefined;\n};\n\nconst getMediaQueryRule = (query: Query, newRule: string) => {\n  if (\n    typeof query.minWidth === 'number' &&\n    typeof query.maxWidth === 'number'\n  ) {\n    return `@media only screen and (min-width: ${query.minWidth}px) and (max-width: ${query.maxWidth}px) { ${newRule} }`;\n  } else if (typeof query.minWidth === 'number') {\n    return `@media only screen and (min-width: ${query.minWidth}px) { ${newRule} }`;\n  } else if (typeof query.maxWidth === 'number') {\n    return `@media only screen and (max-width: ${query.maxWidth}px) { ${newRule} }`;\n  }\n  return undefined;\n};\n\nconst getResponsiveStyles = (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  const queryString = stableHash(queries.query);\n  const queriesHash = hash(queryString);\n\n  const styles = queries.initial\n    ? [\n        StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n          .initial,\n      ]\n    : undefined;\n\n  let dataSet: DataSet = {};\n  let styleSheet: any;\n\n  /**\n   * This function is copied from intergalacticspacehighway/rnw-responsive-ssr\n   */\n  const insert = (rule: string) => {\n    if (typeof window !== 'undefined') {\n      if (!styleSheet) {\n        const styleEl = document.createElement('style');\n        styleEl.type = 'text/css';\n        styleEl.appendChild(document.createTextNode(''));\n        document.head.appendChild(styleEl);\n        styleSheet = styleEl.sheet;\n      }\n\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n  };\n\n  if (queries.query) {\n    queries.query.forEach((queryRule) => {\n      const queryHash = queriesHash + hash(stableHash(queryRule));\n      const dataAttribute = getDataAttribute(queryRule);\n\n      if (dataAttribute) {\n        const newIdentifier = `[data-${dataAttribute}$=\"${queryHash}\"]`;\n        dataSet[dataAttribute] = queryHash;\n\n        let mediaRules = '';\n\n        const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n        const newStyle = preprocess(flattenQueryStyle);\n        const [compiledStyle, compiledOrderedRules] = atomic(newStyle);\n        //@ts-ignore\n        delete compiledStyle.$$css; //removing unnecessary $$css property\n        Object.keys(compiledStyle).forEach((key) => {\n          const oldIdentifier = compiledStyle[key];\n          compiledOrderedRules.forEach(([rules, _order]: any) => {\n            // Rule returned by atomic has css selectors, so we'll replace it with data-attr selector\n\n            let newRule = '';\n            if (rules[0].includes(oldIdentifier)) {\n              newRule = rules[0].replace('.' + oldIdentifier, newIdentifier);\n            }\n            mediaRules += newRule;\n          });\n        });\n        if (mediaRules) {\n          const mediaQueryRule = getMediaQueryRule(queryRule, mediaRules);\n          insert(`/*${queryHash}{}*/${mediaQueryRule}`);\n          textContentMap[`/*${queryHash}{}*/${mediaQueryRule}`] = true;\n        }\n      }\n    });\n  }\n\n  return { styles, dataSet };\n};\n\n/**\n * This function is copied from intergalacticspacehighway/rnw-responsive-ssr\n */\nexport const getStyleElement = () => {\n  return (\n    <style\n      type=\"text/css\"\n      dangerouslySetInnerHTML={{ __html: Object.keys(textContentMap).join('') }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}