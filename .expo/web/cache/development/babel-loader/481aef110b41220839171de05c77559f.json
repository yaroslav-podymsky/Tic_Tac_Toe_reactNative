{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport _useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { useSubscription } from 'use-subscription';\nimport { useNativeBaseConfig } from \"../NativeBaseContext\";\nexport var useColorMode = function useColorMode() {\n  var _React$useContext = React.useContext(HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\nexport var useAppState = function useAppState() {\n  var subscription = React.useMemo(function () {\n    return {\n      getCurrentValue: function getCurrentValue() {\n        return AppState.currentState;\n      },\n      subscribe: function subscribe(callback) {\n        var subsription = AppState.addEventListener('change', callback);\n        return function () {\n          if (AppState.removeEventListener) {\n            AppState.removeEventListener('change', callback);\n          } else {\n            subsription.remove();\n          }\n        };\n      }\n    };\n  }, []);\n  var isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    return useSubscription(subscription);\n  }\n};\nexport var useColorScheme = function useColorScheme() {\n  var colorScheme = _useColorScheme();\n\n  var _useState = useState(colorScheme),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentScheme = _useState2[0],\n      setCurrentScheme = _useState2[1];\n\n  var appState = useAppState();\n  useEffect(function () {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n  return currentScheme;\n};\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _useState3 = useState(initialColorMode),\n      _useState4 = _slicedToArray(_useState3, 2),\n      colorMode = _useState4[0],\n      setRawMode = _useState4[1];\n\n  var setColorMode = React.useCallback(function _callee(val) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(colorModeManager.set(val));\n\n          case 3:\n            setRawMode(val);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regeneratorRuntime.async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(colorModeManager.get(initialColorMode));\n\n              case 2:\n                value = _context2.sent;\n\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  var _React$useContext2 = React.useContext(HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"sources":["hooks.tsx"],"names":["useColorMode","colorMode","colorModeContext","React","useAppState","subscription","getCurrentValue","AppState","subscribe","callback","subsription","isSSR","useNativeBaseConfig","useSubscription","useColorScheme","colorScheme","_useColorScheme","useState","appState","useEffect","setCurrentScheme","systemColorMode","initialColorMode","setColorMode","colorModeManager","setRawMode","value","toggleAccessibleColors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\nimport { useNativeBaseConfig } from '../NativeBaseContext';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        const subsription = AppState.addEventListener('change', callback);\n        return () => {\n          if (AppState.removeEventListener) {\n            // React Native < 0.65\n            AppState.removeEventListener('change', callback);\n          } else {\n            // React Native >= 0.65\n            // @ts-ignore:next-line ignoring ts error as devDependency contains \"@types/react-native\" < 0.65\n            subsription.remove();\n          }\n        };\n      },\n    }),\n    []\n  );\n\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSubscription(subscription);\n  }\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}