{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\", \"isFocusVisible\", \"variant\"],\n    _excluded2 = [\"onValueChange\", \"selectedValue\", \"children\", \"dropdownIcon\", \"dropdownCloseIcon\", \"dropdownOpenIcon\", \"placeholder\", \"accessibilityLabel\", \"defaultValue\", \"_item\", \"_selectedItem\", \"onOpen\", \"onClose\", \"optimized\", \"_customDropdownIconProps\", \"_actionSheet\", \"_actionSheetContent\", \"_actionSheetBody\", \"_webSelect\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Actionsheet } from \"../../composites/Actionsheet\";\nimport Box from \"../Box\";\nimport { Input } from \"../Input\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from \"../../../hooks\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { ChevronDownIcon } from \"../Icon/Icons\";\nimport { ScrollView } from \"../../basic/ScrollView\";\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { FlatList } from \"../../basic/FlatList\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { Pressable } from \"../Pressable\";\nexport var SelectContext = React.createContext({\n  onValueChange: function onValueChange() {},\n  selectedValue: null,\n  _selectedItem: {},\n  _item: {}\n});\n\nvar Select = function Select(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n      isFocusedProp = _ref2.isFocused,\n      isFocusVisibleProp = _ref2.isFocusVisible,\n      variant = _ref2.variant,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID\n  });\n  var flatListData = [];\n  var isDisabled = selectProps.disabled;\n  var tempFix = '__NativebasePlaceholder__';\n\n  var _ref = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isOpen = _React$useState2[0],\n      setIsOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isFocused = _React$useState4[0],\n      setIsFocused = _React$useState4[1];\n\n  var _useFocusRing = useFocusRing(),\n      focusProps = _useFocusRing.focusProps,\n      isFocusVisible = _useFocusRing.isFocusVisible;\n\n  var _useHover = useHover({\n    isDisabled: isDisabled\n  }, _ref),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _usePropsResolution = usePropsResolution('Select', props, {\n    isDisabled: isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible\n  }, undefined),\n      onValueChange = _usePropsResolution.onValueChange,\n      selectedValue = _usePropsResolution.selectedValue,\n      children = _usePropsResolution.children,\n      dropdownIcon = _usePropsResolution.dropdownIcon,\n      dropdownCloseIcon = _usePropsResolution.dropdownCloseIcon,\n      dropdownOpenIcon = _usePropsResolution.dropdownOpenIcon,\n      placeholder = _usePropsResolution.placeholder,\n      accessibilityLabel = _usePropsResolution.accessibilityLabel,\n      defaultValue = _usePropsResolution.defaultValue,\n      _item = _usePropsResolution._item,\n      _selectedItem = _usePropsResolution._selectedItem,\n      onOpen = _usePropsResolution.onOpen,\n      onClose = _usePropsResolution.onClose,\n      optimized = _usePropsResolution.optimized,\n      _customDropdownIconProps = _usePropsResolution._customDropdownIconProps,\n      _actionSheet = _usePropsResolution._actionSheet,\n      _actionSheetContent = _usePropsResolution._actionSheetContent,\n      _actionSheetBody = _usePropsResolution._actionSheetBody,\n      _webSelect = _usePropsResolution._webSelect,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _useControllableState = useControllableState({\n    value: selectedValue,\n    defaultValue: defaultValue,\n    onChange: function onChange(newValue) {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      value = _useControllableState2[0],\n      setValue = _useControllableState2[1];\n\n  var itemsList = React.Children.toArray(children).map(function (child) {\n    var _child$props, _child$props2;\n\n    return {\n      label: child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.label,\n      value: child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.value\n    };\n  });\n  var selectedItemArray = itemsList.filter(function (item) {\n    return (item === null || item === void 0 ? void 0 : item.value) === value;\n  });\n  var selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  var contextValue = React.useMemo(function () {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},\n      _item: _item !== null && _item !== void 0 ? _item : {}\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  var rightIcon = isOpen && dropdownOpenIcon ? dropdownOpenIcon : !isOpen && dropdownCloseIcon ? dropdownCloseIcon : dropdownIcon ? dropdownIcon : React.createElement(ChevronDownIcon, _customDropdownIconProps);\n\n  var handleClose = function handleClose() {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map(function (child) {\n      flatListData.push(child.props);\n    });\n  }\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), ['shadow', 'opacity'])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      layoutProps = _extractInObject2[0],\n      nonLayoutProps = _extractInObject2[1];\n\n  var commonInput = React.createElement(Input, _extends({\n    placeholder: placeholder,\n    InputRightElement: rightIcon\n  }, nonLayoutProps, {\n    isFocused: isFocused,\n    isHovered: isHovered,\n    \"aria-hidden\": true,\n    importantForAccessibility: \"no\",\n    value: selectedItem ? selectedItem.label : '',\n    editable: false,\n    focusable: false,\n    isDisabled: isDisabled,\n    pointerEvents: \"none\",\n    variant: variant\n  }));\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? React.createElement(React.Fragment, null, React.createElement(Pressable, _extends({\n    onPress: function onPress() {\n      Keyboard.dismiss();\n      setIsOpen(true);\n      onOpen && onOpen();\n    },\n    disabled: isDisabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    ref: mergeRefs([ref, _ref])\n  }, layoutProps), commonInput), React.createElement(Actionsheet, _extends({\n    isOpen: isOpen,\n    onClose: handleClose\n  }, _actionSheet), React.createElement(Actionsheet.Content, _actionSheetContent, optimized ? React.createElement(FlatList, _extends({}, _actionSheetBody, {\n    data: flatListData,\n    keyExtractor: function keyExtractor(_item, index) {\n      return index.toString();\n    },\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      var isSelected = selectedValue === (item === null || item === void 0 ? void 0 : item.value);\n      return React.createElement(Actionsheet.Item, _extends({\n        onPress: function onPress() {\n          if (!isDisabled) {\n            setValue(item === null || item === void 0 ? void 0 : item.value);\n          }\n        },\n        accessibilityState: {\n          selected: isSelected\n        }\n      }, item, _item, isSelected && _selectedItem), item === null || item === void 0 ? void 0 : item.label);\n    }\n  })) : React.createElement(ScrollView, _actionSheetBody, React.createElement(SelectContext.Provider, {\n    value: contextValue\n  }, children))))) : React.createElement(Box, layoutProps, React.createElement(\"select\", _extends({\n    \"aria-readonly\": selectProps.readOnly,\n    required: selectProps.required,\n    disabled: isDisabled\n  }, focusProps, hoverProps, {\n    ref: mergeRefs([ref, _ref]),\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n    },\n    value: selectedItem === null ? tempFix : value,\n    \"aria-label\": placeholder,\n    onFocus: function onFocus() {\n      setIsFocused(true);\n      onOpen && onOpen();\n    },\n    onBlur: function onBlur() {\n      setIsFocused(false);\n      onClose && onClose();\n    }\n  }, _webSelect), React.createElement(\"option\", {\n    disabled: true,\n    value: tempFix\n  }, placeholder), children), commonInput);\n};\n\nexport default memo(forwardRef(Select));","map":{"version":3,"sources":["Select.tsx"],"names":["SelectContext","onValueChange","selectedValue","_selectedItem","_item","Select","isHovered","isFocused","isFocusVisible","props","selectProps","useFormControl","isDisabled","nativeID","flatListData","tempFix","_ref","React","useFocusRing","useHover","resolvedProps","usePropsResolution","isHoveredProp","isFocusedProp","isFocusVisibleProp","useControllableState","value","defaultValue","onChange","newValue","setIsOpen","itemsList","child","label","selectedItemArray","item","selectedItem","contextValue","useHasResponsiveProps","rightIcon","isOpen","dropdownIcon","handleClose","onClose","extractInObject","stylingProps","commonInput","variant","Platform","Keyboard","onOpen","mergeRefs","optimized","index","isSelected","setValue","selected","e","setIsFocused","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    _customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{\n    label: string;\n    value: string;\n  }> = React.Children.toArray(children).map((child: any) => {\n    return {\n      label: child?.props?.label,\n      value: child?.props?.value,\n    };\n  });\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item?.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {..._customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map((child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...nonLayoutProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n      variant={variant}\n    />\n  );\n\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose} {..._actionSheet}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item?.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item?.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item?.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  ) : (\n    <Box {...layoutProps}>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]},"metadata":{},"sourceType":"module"}