{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useOverlayTriggerState as $9Xvoh$useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useState as $9Xvoh$useState } from \"react\";\n\nfunction $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {\n  var overlayTriggerState = (0, $9Xvoh$useOverlayTriggerState)(props);\n\n  var _ref = (0, $9Xvoh$useState)(null),\n      _ref2 = _slicedToArray(_ref, 2),\n      focusStrategy = _ref2[0],\n      setFocusStrategy = _ref2[1];\n\n  return _objectSpread(_objectSpread({\n    focusStrategy: focusStrategy\n  }, overlayTriggerState), {}, {\n    open: function open() {\n      var focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle: function toggle() {\n      var focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    }\n  });\n}\n\nexport { $a28c903ee9ad8dc5$export$79fefeb1c2091ac3 as useMenuTriggerState };","map":{"version":3,"sources":["packages/@react-stately/menu/src/useMenuTriggerState.ts"],"names":[],"mappings":";;;;;;;;;;AAgCO,SAAS,yCAAT,CAA6B,KAA7B,EAAyE;EAC9E,IAAI,mBAAA,GAAsB,CAAA,GAAA,6BAAA,EAAuB,KAAvB,CAA1B;;EACA,WAAwC,CAAA,GAAA,eAAA,EAAwB,IAAxB,CAAxC;EAAA;EAAA,IAAK,aAAL;EAAA,IAAoB,gBAApB;;EAEA;mBACE;EADF,GAEK,mBAFL;IAGE,IAHF,kBAG4C;MAAA,IAArC,aAAqC,uEAAN,IAAM;MACxC,gBAAA,CAAiB,aAAjB,CAAA;MACA,mBAAA,CAAoB,IAApB;IACF,CANF;IAOE,MAPF,oBAO8C;MAAA,IAArC,aAAqC,uEAAN,IAAM;MAC1C,gBAAA,CAAiB,aAAjB,CAAA;MACA,mBAAA,CAAoB,MAApB;IACF;EAVF;AAYF","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy} from '@react-types/shared';\nimport {MenuTriggerProps} from '@react-types/menu';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\n\nexport interface MenuTriggerState extends OverlayTriggerState {\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\n/**\n * Manages state for a menu trigger. Tracks whether the menu is currently open,\n * and controls which item will receive focus when it opens.\n */\nexport function useMenuTriggerState(props: MenuTriggerProps): MenuTriggerState  {\n  let overlayTriggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n\n  return {\n    focusStrategy,\n    ...overlayTriggerState,\n    open(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}